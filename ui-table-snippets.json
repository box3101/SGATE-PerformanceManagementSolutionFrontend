{
  "flex-container 부모 클래스": {
    "prefix": "flex-container",
    "body": ["<div class=\"flex-container\">\n  $1\n</div>"],
    "description": "반응형 레이아웃을 위한 부모 컨테이너 클래스"
  },
  "왼쪽 50% 클래스": {
    "prefix": "w50left",
    "body": ["<div class=\"w-50p-left\">\n  $1\n</div>"],
    "description": "왼쪽 50% 너비 클래스"
  },
  "오른쪽 50% 클래스": {
    "prefix": "w50right",
    "body": ["<div class=\"w-50p-right\">\n  $1\n</div>"],
    "description": "오른쪽 50% 너비 클래스"
  },
  "왼쪽/오른쪽 50% 레이아웃": {
    "prefix": "w50layout",
    "body": [
      "<div class=\"flex-container\">\n  <div class=\"w-50p-left\">\n    ${1:<!-- 왼쪽 콘텐츠 -->}\n  </div>\n  <div class=\"w-50p-right\">\n    ${2:<!-- 오른쪽 콘텐츠 -->}\n  </div>\n</div>"
    ],
    "description": "왼쪽/오른쪽 50% 너비 레이아웃 구조"
  },
  "기본 50% 클래스": {
    "prefix": "w50p",
    "body": ["<div class=\"w-50p\">\n  $1\n</div>"],
    "description": "기본 50% 너비 클래스"
  },
  "width50% 인라인 스타일": {
    "prefix": "width50",
    "body": ["style=\"width: 50%\""],
    "description": "너비 50% 인라인 스타일"
  },
  "페이지 헤더 영역": {
    "prefix": "page-header",
    "body": [
      "<div class=\"page-header\">\n      <div class=\"header-left\">\n        <div class=\"select-group\">\n          <div class=\"select-item\">\n            <span class=\"select-label\">${1:기준년도}</span>\n            <UiSelect\n              v-model=\"${2:selectedYear}\"\n              :options=\"${3:yearOptions}\"\n              size=\"medium\"\n              placeholder=\"선택\"\n              width=\"150px\"\n            />\n          </div>\n          <div class=\"select-item flex items-center\">\n            <span class=\"select-label\">${4:등급배분그룹}</span>\n            <UiSelect\n              v-model=\"${5:selectedGroup}\"\n              :options=\"${6:groupOptions}\"\n              placeholder=\"선택\"\n              width=\"150px\"\n            />\n            <div class=\"button-group ml-4 flex items-center gap-4\">\n              <UiButton variant=\"primary\" icon-only>\n                <i class=\"icon-md icon-plus\"></i>\n              </UiButton>\n              <UiButton variant=\"secondary\" icon-only>\n                <i class=\"icon-md icon-pencil\"></i>\n              </UiButton>\n              <UiButton variant=\"secondary-line\" icon-only>\n                <i class=\"icon-md icon-delete\"></i>\n              </UiButton>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"header-right\">\n        <div class=\"button-group\">\n          <UiTooltip title=\"${7:등급배분표 그룹 가져오기}\">\n            <template #trigger>\n              <UiButton type=\"button\" variant=\"secondary-line\" size=\"medium\">\n                ${7:등급배분표 그룹 가져오기}\n                <i class=\"icon-md icon-get\"></i>\n              </UiButton>\n            </template>\n            <p>${8:현 기존년도의 등급배분표 그룹 중 하나를 선택하여 복사합니다.}</p>\n          </UiTooltip>\n          <UiButton type=\"button\" variant=\"primary-line\" size=\"medium\" class=\"ml-2\">\n            ${9:전년도 데이터 복사}\n            <i class=\"icon-md icon-copy icon-primary\"></i>\n          </UiButton>\n        </div>\n      </div>\n    </div>\n\n<!-- 헤더 관련 스크립트 -->\nconst ${2:selectedYear} = ref('${10:2025}')\nconst ${3:yearOptions} = ref([\n  { value: '2025', label: '2025년' },\n  { value: '2024', label: '2024년' },\n  { value: '2023', label: '2023년' }\n])\n\nconst ${5:selectedGroup} = ref('')\nconst ${6:groupOptions} = ref([\n  { value: 'group1', label: '등급배분그룹 1' },\n  { value: 'group2', label: '등급배분그룹 2' },\n  { value: 'group3', label: '등급배분그룹 3' }\n])"
    ],
    "description": "기준년도와 그룹 선택, 버튼 그룹이 포함된 페이지 헤더 레이아웃"
  },
  "UiTable - 체크박스, 입력 필드, 일반 텍스트 조합": {
    "prefix": "ui-table",
    "body": [
      "<!-- ${1:테이블 제목} 테이블 -->",
      "<UiTable",
      "  title=\"${1:테이블 제목}\"",
      "  v-model=\"${2:tableData}\"",
      "  editable",
      "  hover",
      "  :default-row-data=\"{ ${3:name}: '', ${4:value}: 0 }\"",
      "  @save=\"${5:handleSave}\"",
      ">",
      "  <template #colgroup>",
      "    <col style=\"width: 40px\" />",
      "    <col />",
      "    <col style=\"width: ${6:100px}\" />",
      "  </template>",
      "  <template #header=\"{ selectAll, isAllSelected, sortable }\">",
      "    <tr>",
      "      <th style=\"width: 40px\">",
      "        <UiCheckbox",
      "          :modelValue=\"isAllSelected\"",
      "          @update:modelValue=\"selectAll\"",
      "          size=\"large\"",
      "        />",
      "      </th>",
      "      <th>${7:첫번째 열 제목}</th>",
      "      <th>${8:두번째 열 제목}</th>",
      "    </tr>",
      "  </template>",
      "  <template",
      "    #body=\"{",
      "      rows,",
      "      toggleRowSelection,",
      "      isRowSelected,",
      "      handleDragStart,",
      "      handleDragOver,",
      "      handleDrop,",
      "      handleDragEnd,",
      "      sortable",
      "    }\"",
      "  >",
      "    <tr",
      "      v-for=\"(item, index) in rows\"",
      "      :key=\"item.id\"",
      "      @click=\"!sortable && toggleRowSelection(item)\"",
      "      :class=\"{",
      "        selected: isRowSelected(item),",
      "        'sortable-row': sortable",
      "      }\"",
      "      :draggable=\"sortable\"",
      "      @dragstart=\"e => handleDragStart(e, index)\"",
      "      @dragover=\"e => handleDragOver(e)\"",
      "      @drop=\"e => handleDrop(e, index)\"",
      "      @dragend=\"handleDragEnd\"",
      "    >",
      "      <td>",
      "        <div v-if=\"!sortable\" class=\"row-checkbox\">",
      "          <UiCheckbox",
      "            :modelValue=\"isRowSelected(item)\"",
      "            @update:modelValue=\"toggleRowSelection(item)\"",
      "            size=\"large\"",
      "            @click.stop",
      "          />",
      "        </div>",
      "        <div v-else class=\"drag-handle\">",
      "          <i class=\"icon-md icon-drag\"></i>",
      "        </div>",
      "      </td>",
      "      <td>",
      "        <UiInput v-model=\"item.${3:name}\" size=\"large\" @click.stop />",
      "      </td>",
      "      <td class=\"text-center\">",
      "        {{ item.${4:value} }}",
      "      </td>",
      "    </tr>",
      "  </template>",
      "</UiTable>",
      "",
      "<!-- ${1:테이블 제목} 테이블 관련 스크립트 -->",
      "const ${2:tableData} = ref([",
      "  { id: 1, ${3:name}: '${9:샘플 데이터 1}', ${4:value}: ${10:10} },",
      "  { id: 2, ${3:name}: '${11:샘플 데이터 2}', ${4:value}: ${12:20} },",
      "  { id: 3, ${3:name}: '${13:샘플 데이터 3}', ${4:value}: ${14:30} }",
      "])",
      "",
      "const ${5:handleSave} = (data) => {",
      "  console.log('저장된 데이터:', data)",
      "  // API 호출 등의 저장 로직",
      "}"
    ],
    "description": "체크박스, 입력 필드, 일반 텍스트 값 조합의 UiTable 스니펫"
  },
  "UiTable - 체크박스, 입력 필드, 입력 필드 조합": {
    "prefix": "ui-table2",
    "body": [
      "<!-- ${1:테이블 제목} 테이블 -->",
      "<UiTable",
      "  title=\"${1:테이블 제목}\"",
      "  v-model=\"${2:tableData}\"",
      "  editable",
      "  hover",
      "  :default-row-data=\"{ ${3:name}: '', ${4:value}: '' }\"",
      "  @save=\"${5:handleSave}\"",
      ">",
      "  <template #colgroup>",
      "    <col style=\"width: 40px\" />",
      "    <col />",
      "    <col style=\"width: ${6:150px}\" />",
      "  </template>",
      "  <template #header=\"{ selectAll, isAllSelected, sortable }\">",
      "    <tr>",
      "      <th style=\"width: 40px\">",
      "        <UiCheckbox",
      "          :modelValue=\"isAllSelected\"",
      "          @update:modelValue=\"selectAll\"",
      "          size=\"large\"",
      "        />",
      "      </th>",
      "      <th>${7:첫번째 열 제목}</th>",
      "      <th>${8:두번째 열 제목}</th>",
      "    </tr>",
      "  </template>",
      "  <template",
      "    #body=\"{",
      "      rows,",
      "      toggleRowSelection,",
      "      isRowSelected,",
      "      handleDragStart,",
      "      handleDragOver,",
      "      handleDrop,",
      "      handleDragEnd,",
      "      sortable",
      "    }\"",
      "  >",
      "    <tr",
      "      v-for=\"(item, index) in rows\"",
      "      :key=\"item.id\"",
      "      @click=\"!sortable && toggleRowSelection(item)\"",
      "      :class=\"{",
      "        selected: isRowSelected(item),",
      "        'sortable-row': sortable",
      "      }\"",
      "      :draggable=\"sortable\"",
      "      @dragstart=\"e => handleDragStart(e, index)\"",
      "      @dragover=\"e => handleDragOver(e)\"",
      "      @drop=\"e => handleDrop(e, index)\"",
      "      @dragend=\"handleDragEnd\"",
      "    >",
      "      <td>",
      "        <div v-if=\"!sortable\" class=\"row-checkbox\">",
      "          <UiCheckbox",
      "            :modelValue=\"isRowSelected(item)\"",
      "            @update:modelValue=\"toggleRowSelection(item)\"",
      "            size=\"large\"",
      "            @click.stop",
      "          />",
      "        </div>",
      "        <div v-else class=\"drag-handle\">",
      "          <i class=\"icon-md icon-drag\"></i>",
      "        </div>",
      "      </td>",
      "      <td>",
      "        <UiInput v-model=\"item.${3:name}\" size=\"large\" @click.stop />",
      "      </td>",
      "      <td>",
      "        <UiInput v-model=\"item.${4:value}\" size=\"large\" @click.stop />",
      "      </td>",
      "    </tr>",
      "  </template>",
      "</UiTable>",
      "",
      "<!-- ${1:테이블 제목} 테이블 관련 스크립트 -->",
      "const ${2:tableData} = ref([",
      "  { id: 1, ${3:name}: '${9:샘플 데이터 1}', ${4:value}: '${10:값 1}' },",
      "  { id: 2, ${3:name}: '${11:샘플 데이터 2}', ${4:value}: '${12:값 2}' },",
      "  { id: 3, ${3:name}: '${13:샘플 데이터 3}', ${4:value}: '${14:값 3}' }",
      "])",
      "",
      "const ${5:handleSave} = (data) => {",
      "  console.log('저장된 데이터:', data)",
      "  // API 호출 등의 저장 로직",
      "}"
    ],
    "description": "체크박스, 입력 필드, 입력 필드 조합의 UiTable 스니펫"
  },
  "UiTable - 입력 필드, 텍스트, 텍스트 조합": {
    "prefix": "ui-table3",
    "body": [
      "<!-- ${1:테이블 제목} 테이블 -->",
      "<UiTable",
      "  title=\"${1:테이블 제목}\"",
      "  v-model=\"${2:tableData}\"",
      "  editable",
      "  hover",
      "  :default-row-data=\"{ ${3:name}: '', ${4:value1}: 0, ${5:value2}: 0 }\"",
      "  @save=\"${6:handleSave}\"",
      ">",
      "  <template #colgroup>",
      "    <col />",
      "    <col style=\"width: ${7:100px}\" />",
      "    <col style=\"width: ${8:100px}\" />",
      "  </template>",
      "  <template #header=\"{ sortable }\">",
      "    <tr>",
      "      <th>${9:첫번째 열 제목}</th>",
      "      <th>${10:두번째 열 제목}</th>",
      "      <th>${11:세번째 열 제목}</th>",
      "    </tr>",
      "  </template>",
      "  <template",
      "    #body=\"{",
      "      rows,",
      "      handleDragStart,",
      "      handleDragOver,",
      "      handleDrop,",
      "      handleDragEnd,",
      "      sortable",
      "    }\"",
      "  >",
      "    <tr",
      "      v-for=\"(item, index) in rows\"",
      "      :key=\"item.id\"",
      "      :class=\"{",
      "        'sortable-row': sortable",
      "      }\"",
      "      :draggable=\"sortable\"",
      "      @dragstart=\"e => handleDragStart(e, index)\"",
      "      @dragover=\"e => handleDragOver(e)\"",
      "      @drop=\"e => handleDrop(e, index)\"",
      "      @dragend=\"handleDragEnd\"",
      "    >",
      "      <td>",
      "        <UiInput v-model=\"item.${3:name}\" size=\"large\" @click.stop />",
      "      </td>",
      "      <td class=\"text-center\">",
      "        {{ item.${4:value1} }}",
      "      </td>",
      "      <td class=\"text-center\">",
      "        {{ item.${5:value2} }}",
      "      </td>",
      "    </tr>",
      "  </template>",
      "</UiTable>",
      "",
      "<!-- ${1:테이블 제목} 테이블 관련 스크립트 -->",
      "const ${2:tableData} = ref([",
      "  { id: 1, ${3:name}: '${12:샘플 데이터 1}', ${4:value1}: ${13:10}, ${5:value2}: ${14:20} },",
      "  { id: 2, ${3:name}: '${15:샘플 데이터 2}', ${4:value1}: ${16:30}, ${5:value2}: ${17:40} },",
      "  { id: 3, ${3:name}: '${18:샘플 데이터 3}', ${4:value1}: ${19:50}, ${5:value2}: ${20:60} }",
      "])",
      "",
      "const ${6:handleSave} = (data) => {",
      "  console.log('저장된 데이터:', data)",
      "  // API 호출 등의 저장 로직",
      "}"
    ],
    "description": "입력 필드, 텍스트, 텍스트 조합의 UiTable 스니펫"
  }
}
